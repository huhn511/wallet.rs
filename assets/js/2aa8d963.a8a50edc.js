(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return g}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),g=r,m=d["".concat(l,".").concat(g)]||d[g]||p[g]||s;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5777:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var a=t(2122),r=t(9756),s=(t(7294),t(3905)),i=["components"],o={},l={unversionedId:"libraries/rust/examples",id:"libraries/rust/examples",isDocsHomePage:!1,title:"Examples",description:"You can see the examples in the library's examples directory.",source:"@site/docs/libraries/rust/examples.md",sourceDirName:"libraries/rust",slug:"/libraries/rust/examples",permalink:"/wallet.rs/docs/libraries/rust/examples",editUrl:"https://github.com/iotaledger/wallet.rs/tree/main/docs/docs/libraries/rust/examples.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Getting Started with Rust",permalink:"/wallet.rs/docs/libraries/rust/getting_started"},next:{title:"API Reference",permalink:"/wallet.rs/docs/libraries/rust/api_reference"}},c=[{value:"Backup and Restore Example",id:"backup-and-restore-example",children:[]},{value:"Transfer Example:",id:"transfer-example",children:[]},{value:"Events example:",id:"events-example",children:[]},{value:"Logger example:",id:"logger-example",children:[]}],u={toc:c};function p(e){var n=e.components,t=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"You can see the examples in the library's ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wallet.rs/tree/dev/examples"},"examples directory"),".\nYou can list all available examples by running the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"cargo run --example # lists the available examples\n")),(0,s.kt)("p",null,"To run an example, you can use the following command, replacing ",(0,s.kt)("em",{parentName:"p"},"transfer")," with the desired example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"cargo run --example transfer # execute the `transfer` example\n")),(0,s.kt)("h2",{id:"backup-and-restore-example"},"Backup and Restore Example"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create an account manager and set a password:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let manager = AccountManager::builder().finish().await.unwrap();\n\nmanager.set_stronghold_password("password").await.unwrap();\nmanager.store_mnemonic(SignerType::Stronghold, None).await.unwrap();\n\n')),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Create your account:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let client_options = ClientOptionsBuilder::new()\n    .with_node("https://api.lb-0.testnet.chrysalis2.com")?\n    .build()\n    .unwrap();\nlet account_handle = manager\n    .create_account(client_options)?\n    .alias("alias")\n    .initialise()\n    .await?;\nlet id = account_handle.id().await;\n\n')),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"You can secure your account in a backup file:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'// backup the stored accounts to ./backup/${backup_name}\nlet backup_path = manager.backup("./backup").await?;\n\n')),(0,s.kt)("ol",{start:4},(0,s.kt)("li",{parentName:"ol"},"You can import the backup later, or in another application using the following snippet:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'manager.import_accounts(backup_path, "password").await?;\n\nlet imported_account_handle = manager.get_account(&id).await?;\n\nlet account = account_handle.read().await;\nlet imported_account = imported_account_handle.read().await;\n\n')),(0,s.kt)("p",null,"That's it! You can now backup and restore your account!"),(0,s.kt)("p",null,"You can see the full code for the example in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wallet.rs/blob/develop/examples/backup_and_restore.rs"},(0,s.kt)("inlineCode",{parentName:"a"},"wallet.rs")," repository")),(0,s.kt)("h2",{id:"transfer-example"},"Transfer Example:"),(0,s.kt)("p",null,"You use the following example to generate an account, and transfer funds. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2020 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\nuse iota_wallet::{\n    account_manager::AccountManager, client::ClientOptionsBuilder, message::Transfer, signing::SignerType,\n};\nuse std::num::NonZeroU64;\n\n#[tokio::main]\nasync fn main() -> iota_wallet::Result<()> {\n    let manager = AccountManager::builder().finish().await.unwrap();\n    manager.set_stronghold_password("password").await.unwrap();\n    manager.store_mnemonic(SignerType::Stronghold, None).await.unwrap();\n\n    // first we\'ll create an example account and store it\n    let client_options = ClientOptionsBuilder::new()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com")?\n        .build()\n        .unwrap();\n    let account = manager\n        .create_account(client_options)?\n        .alias("alias")\n        .initialise()\n        .await?;\n\n    let address = account.generate_address().await?;\n    println!(\n        "Send iotas from the faucet to {} and press enter after the transaction got confirmed",\n        address.address().to_bech32()\n    );\n    let mut message = String::new();\n    std::io::stdin().read_line(&mut message).unwrap();\n    println!("Sending transfer...");\n    let message = account\n        .transfer(\n            Transfer::builder(\n                account.latest_address().await.address().clone(),\n                NonZeroU64::new(1500000).unwrap(),\n            )\n            .finish(),\n        )\n        .await?;\n    println!("Message sent: {}", message.id());\n\n    Ok(())\n}\n\n')),(0,s.kt)("h2",{id:"events-example"},"Events example:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"wallet.rs")," library is able to listen to several supported event. As soon as the event occurs, a provided callback will be triggered."),(0,s.kt)("p",null,"You can use the following example to fetch an existing ",(0,s.kt)("em",{parentName:"p"},"Account")," and listen to transaction events related to that ",(0,s.kt)("em",{parentName:"p"},"Account")," :"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2020 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example event --release\n\nuse iota_wallet::{\n    account_manager::AccountManager, address::Address, client::ClientOptionsBuilder, event::on_balance_change,\n    message::MessageId, signing::SignerType, Result,\n};\nuse serde::Deserialize;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let manager = AccountManager::builder().finish().await?;\n    manager.set_stronghold_password("password").await?;\n    manager.store_mnemonic(SignerType::Stronghold, None).await?;\n\n    // first we\'ll create an example account and store it\n    let client_options = ClientOptionsBuilder::new()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com")?\n        .build()?;\n\n    let account = manager\n        .create_account(client_options)?\n        .alias("alias")\n        .initialise()\n        .await?;\n\n    // Possible events are: on_balance_change, on_broadcast, on_confirmation_state_change, on_error,\n    // on_migration_progress, on_new_transaction, on_reattachment, on_stronghold_status_change,\n    // on_transfer_progress,\n    on_balance_change(move |event| {\n        println!("BalanceEvent: {:?}", event);\n        println!("Press enter to exit");\n    })\n    .await;\n\n    let address = account.generate_address().await?;\n    println!("Requesting funds from the faucet to {}", address.address().to_bech32());\n    get_funds(&address).await?;\n\n    // Wait for event before exit\n    let mut exit = String::new();\n    std::io::stdin().read_line(&mut exit).unwrap();\n    Ok(())\n}\n\n#[derive(Deserialize)]\nstruct FaucetMessageResponse {\n    id: String,\n}\n\n#[derive(Deserialize)]\nstruct FaucetResponse {\n    data: FaucetMessageResponse,\n}\n\nasync fn get_funds(address: &Address) -> Result<MessageId> {\n    // use the faucet to get funds on the address\n    let response = reqwest::get(&format!(\n        "https://faucet.testnet.chrysalis2.com/api?address={}",\n        address.address().to_bech32()\n    ))\n    .await\n    .unwrap()\n    .json::<FaucetResponse>()\n    .await\n    .unwrap();\n    let faucet_message_id = MessageId::from_str(&response.data.id)?;\n\n    println!("Got funds from faucet, message id: {:?}", faucet_message_id);\n\n    Ok(faucet_message_id)\n}\n\n')),(0,s.kt)("h2",{id:"logger-example"},"Logger example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2020 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example logger --release\n\nuse iota_client::common::logger::{logger_init, LoggerConfig, LoggerOutputConfigBuilder};\nuse iota_wallet::account_manager::AccountManager;\nuse log::LevelFilter;\nuse std::time::Instant;\n\n#[tokio::main]\nasync fn main() -> iota_wallet::Result<()> {\n    // Generates a wallet.log file with logs for debugging\n    let output_config = LoggerOutputConfigBuilder::new()\n        .name("wallet.log")\n        .level_filter(LevelFilter::Debug);\n    let config = LoggerConfig::build().with_output(output_config).finish();\n    logger_init(config).unwrap();\n\n    let manager = AccountManager::builder()\n        .with_storage("./backup", None)?\n        .with_skip_polling()\n        .finish()\n        .await?;\n    manager.set_stronghold_password("password").await?;\n\n    let account = manager.get_account("Alice").await?;\n\n    let now = Instant::now();\n    account.sync().await.execute().await?;\n    println!("Syncing took: {:.2?}", now.elapsed());\n\n    println!("Balance: {:?}", account.balance().await?);\n\n    let addresses = account.list_unspent_addresses().await?;\n    println!("Addresses: {}", addresses.len());\n\n    let address = account.generate_address().await?;\n    println!("Generated a new address: {:?}", address);\n\n    Ok(())\n}\n')))}p.isMDXComponent=!0}}]);